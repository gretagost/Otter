#This script is for remove primers with cutadapt in R studio

library(dada2)
library(ShortRead)
library(Biostrings)

path<- "~/Cilento/16S" #Change to the directory containing the fastq files after unzipping
list.files(path)

fnFs<- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs<- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
sample.names<- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names<- sapply(strsplit(basename(fnRs), "_"), `[`, 1)

#Identify primers
FWD<- "CCAACATCGAGGTCRYAA" #Change to your forward primer sequence
REV<- "ARTTACYNTAGGGATAACAG" #Change to your reverse primer sequence

allOrients<- function(primer) {
 #Create all orientations for the input sequence
  require(Biostrings)
  dna<- DNAString(primer) #The Biostrings works w/ DNAString objects rather than character vectors
  orients<- c(Forward = dna, Complement = Biostrings::complement(dna), 
              Reverse = Biostrings::reverse(dna),RevComp = Biostrings::reverseComplement(dna))
  return(sapply(orients, toString)) #Convert back to character vector 
  }

FWD.orients<- allOrients(FWD)
REV.orients<- allOrients(REV)

fnFs.filtN<- file.path(path, "filtN", basename(fnFs)) #Put N-filtered files in filtN/ subdirectory
fnRs.filtN<- file.path(path, "filtN", basename(fnRs))
filterAndTrim(fnFs, fnFs.filtN, fnRs, fnRs.filtN, maxN = 0, multithread = TRUE) #Pre-filter of sequences to remove those with ambiguous bases (Ns)

primerHits<- function(primer, fn) {
  #Counts number of reads in which the primer is found
  nhits<- vcountPattern(primer, sread(readFastq(fn)), fixed = FALSE)
  return(sum(nhits > 0))
  }

rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.filtN[[1]]), 
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.filtN[[1]]),
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.filtN[[1]]),
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.filtN[[1]]))

#Remove primers
cutadapt<- "/usr/bin/cutadapt" #Change to the cutadapt path on your machine
system2(cutadapt, args = "--version") #Run shell commands from R

path.cut<- file.path(path, "cutadapt")
if(!dir.exists(path.cut)) dir.create(path.cut)
fnFs.cut<- file.path(path.cut, basename(fnFs))
fnRs.cut<- file.path(path.cut, basename(fnRs))

FWD.RC<- dada2:::rc(FWD)
REV.RC<- dada2:::rc(REV)
#Trim FWD and the reverse-complement of REV off of R1 (forward reads)
R1.flags<- paste("-g", FWD, "-a", REV.RC) 
#Trim REV and the reverse-complement of FWD off of R2 (reverse reads)
R2.flags<- paste("-G", REV, "-A", FWD.RC) 

#Run cutadapt
for(i in seq_along(fnFs)) {
  system2(cutadapt, args = c(R1.flags, R2.flags, "-n", 2, #-n 2 required to remove FWD and REV from reads
                             "-o", fnFs.cut[i], "-p", fnRs.cut[i], #Output files
                             fnFs.filtN[i], fnRs.filtN[i])) #Input files
}

rbind(FWD.ForwardReads = sapply(FWD.orients, primerHits, fn = fnFs.cut[[1]]), 
      FWD.ReverseReads = sapply(FWD.orients, primerHits, fn = fnRs.cut[[1]]), 
      REV.ForwardReads = sapply(REV.orients, primerHits, fn = fnFs.cut[[1]]), 
      REV.ReverseReads = sapply(REV.orients, primerHits, fn = fnRs.cut[[1]]))

#Forward and reverse fastq filenames have the format:
cutFs<- sort(list.files(path.cut, pattern = "_R1_001.fastq", full.names = TRUE))
cutRs<- sort(list.files(path.cut, pattern = "_R2_001.fastq", full.names = TRUE))

#Extract sample names, assuming filenames have format:
get.sample.name<- function(fname) strsplit(basename(fname), "_")[[1]][1]
sample.names<- unname(sapply(cutFs, get.sample.name))
head(sample.names)

#Prepare fastq files for assign taxonomy pipeline of dada2
path.cut<- file.path(path, "cutadapt")
filtFs<- file.path(path.cut, "filtN", basename(cutFs))
filtRs<- file.path(path.cut, "filtN", basename(cutRs))

#Now you can continue trimming
out <- filterAndTrim(cutFs, filtFs, cutRs, filtRs,
                     maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
                     maxLen = 100, compress=TRUE, multithread=TRUE,matchIDs=F) #On Windows set multithread=FALSE #,trimLeft = 18, trimRight = 20

                       
